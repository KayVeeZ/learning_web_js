<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <link href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css" rel="stylesheet" />
    <title>Document</title>
</head>

<body>
    <main class="p-4 bg-gray-100 dark:bg-gray-800 h-screen w-screen">
        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" onclick="showPopUp()">
            Upload File
        </button>

        <!-- ✅ Upload Modal -->
        <div class="pop hidden backdrop-blur fixed top-0 left-0 h-screen w-screen flex items-center justify-center z-40">
            <button class="rounded-full font-bold bg-gray-100 hover:bg-red-500 text-black hover:text-white dark:text-white dark:hover:text-gray-800 dark:bg-gray-600 hover:outline-1 hover:outline-amber-600 dark:hover:outline-amber-200 p-2 fixed top-4 right-4 transition duration-200"
                onclick="hidePopUp()">x</button>

            <!-- ✅ File Upload Form -->
            <form id="uploadForm" enctype="multipart/form-data" class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg z-50">
                <div class="flex items-center justify-center w-96">
                    <label for="dropzone-file"
                        class="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600"
                        id="dropZoneLabel">
                        <div class="flex flex-col items-center justify-center pt-5 pb-6">
                            <svg class="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true"
                                xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
                            </svg>
                            <p id="dropZoneText" class="mb-2 text-sm text-gray-500 dark:text-gray-400"><span
                                    class="font-semibold">Click to upload</span> or drag and drop</p>
                            <p class="text-xs text-gray-500 dark:text-gray-400">SVG, PNG, JPG or GIF (MAX. 800x400px)</p>
                            <span id="fileName" class="mt-2 text-sm text-gray-600 dark:text-gray-300"></span>
                        </div>
                        <input id="dropzone-file" type="file" class="hidden" name="file" />
                    </label>
                </div><br />
                <button
                    class="bg-gray-100 hover:bg-gray-300 text-black dark:text-white dark:bg-gray-600 dark:hover:bg-gray-700 rounded p-2 w-full mt-2">
                    Upload File
                </button>
            </form>
        </div>

        <!-- ✅ Uploaded Files -->
        <div class="mt-3 files flex flex-col gap-2">
            <% files.forEach((file)=>{ %>
            <div class="cursor-pointer rounded-md bg-gray-300 flex justify-between px-4 py-2">
                <h1><%= file.originalname %></h1>
                <div class="flex items-center gap-2">
                    <a href="/download/<%= file.path %>" class="text-blue-500 hover:text-blue-700"
                        download="<%= file.originalname %>"><i class="ri-file-download-line"></i></a>
                    <button class="cursor-pointer hover:text-red-600" onclick="deleteFile('<%= file._id %>')">
                        <i class="ri-delete-bin-6-line"></i>
                    </button>
                </div>
            </div>
            <% }) %>
        </div>
    </main>

    <!-- ✅ Toast Notification -->
    <div id="toast"
        class="fixed bottom-5 right-5 px-4 py-2 rounded shadow-lg hidden transition-opacity duration-300 z-50 text-white">
    </div>

    <!-- ✅ Spinner -->
    <div id="loadingSpinner" class="hidden fixed top-10 right-10 z-50">
        <svg class="animate-spin h-6 w-6 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none"
            viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor"
                d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z">
            </path>
        </svg>
    </div>

    <!-- ✅ Core Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"></script>
    <script>
        function showPopUp() {
            document.querySelector('.pop').style.display = 'flex';
        }

        function hidePopUp() {
            document.querySelector('.pop').style.display = 'none';
        }

        function deleteFile(fileId) {
            if (confirm('Are you sure you want to delete this file?')) {
                fetch('/delete/' + fileId, {
                    method: 'POST',
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.reload();
                        } else {
                            alert('Error deleting file: ' + data.error);
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting file:', error);
                        alert('Failed to delete file.');
                    });
            }
        }

        // Dropzone logic
        const dropZoneLabel = document.getElementById('dropZoneLabel');
        const fileInput = document.getElementById('dropzone-file');
        const fileNameDisplay = document.getElementById('fileName');
        const dropZoneText = document.getElementById('dropZoneText');

        function updateFileNameDisplay(files) {
            if (files.length > 0) {
                fileNameDisplay.textContent = 'Selected file: ' + files[0].name;
                dropZoneText.textContent = 'File Selected';
            } else {
                fileNameDisplay.textContent = '';
                dropZoneText.textContent = 'Click to upload or drag and drop';
            }
        }

        fileInput.addEventListener('change', function () {
            updateFileNameDisplay(this.files);
        });

        dropZoneLabel.addEventListener('dragover', function (event) {
            event.preventDefault();
            dropZoneLabel.classList.add('bg-gray-200', 'dark:bg-gray-600');
        });

        dropZoneLabel.addEventListener('dragleave', function () {
            dropZoneLabel.classList.remove('bg-gray-200', 'dark:bg-gray-600');
        });

        dropZoneLabel.addEventListener('drop', function (event) {
            event.preventDefault();
            dropZoneLabel.classList.remove('bg-gray-200', 'dark:bg-gray-600');
            const files = event.dataTransfer.files;
            updateFileNameDisplay(files);
            fileInput.files = files;
        });

        // Upload Logic + Toast
        const uploadForm = document.getElementById('uploadForm');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const toast = document.getElementById('toast');

        uploadForm.addEventListener('submit', async function (e) {
            e.preventDefault();

            const formData = new FormData(uploadForm);
            loadingSpinner.classList.remove('hidden');

            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    showToast('File uploaded successfully!', 'success');
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    const errorData = await response.json();
                    showToast('Upload failed: ' + (errorData.error || 'Unknown error'), 'error');
                }
            } catch (err) {
                console.error('Error uploading file:', err);
                showToast('Failed to upload file.', 'error');
            } finally {
                loadingSpinner.classList.add('hidden');
            }
        });

        function showToast(message, type = 'success') {
            toast.textContent = message;
            toast.classList.remove('hidden', 'bg-green-500', 'bg-red-500');
            toast.classList.add(type === 'success' ? 'bg-green-500' : 'bg-red-500');
            setTimeout(() => toast.classList.add('hidden'), 1500);
        }
    </script>
</body>

</html>
